int a;
bool a;
void b;
struct node x;
int x;
bool y;
void z;
struct node_t {
    int a;
    int bb;
    bool ccc;
    struct node_x node;
};
struct node_t {
    int a;
    int bb;
    bool ccc;
    struct node_x node;
};
int foo() {
}
bool foo(int x, int y, bool z) {
    int a;
    int b;
    a = "hello";
    c = (a + b);
    a = (b - c);
    d = (a * c);
    b = (a / d);
    c = (((((a + b) + c) - (d / b)) + ((b * d) / c)) - x);
    a = (!true);
    a = (!b);
    a = (b && c);
    c = (c || d);
    d = ((a && b) || (c && d));
    a = (((b && d) && c) && d);
    a = (((b || c) || d) || e);
    d = (a == c);
    a = b = c;
    c = (a != c);
    d = (a < b);
    x = (a <= b);
    d = (a > b);
    d = (a >= b);
    d = ((a < c) || (b > d));
    d = ((a <= x) && (b >= y));
    d = (-x);
    d = (-3);
    d = (-"hello");
    d = true;
    x = false;
    d = (-(a <= c));
    d = (-foo(x, y, z));
    d = foo1(foo2(foo3(), foo4(x, y)), foo5());
    d = foo1.list.getElement.setNull;
    return 0;
}
int func(int a) {
    cin >> a;
    cin >> a.b.c.d;
    cout << b;
    cout << b.d.c.a;
    cout << "hello again";
    cout << (a + b);
    cout << ((((b * c) / d) - 2) + (3 - x));
    if ((b == (-1))) {
        x = ((4 + (3 * 5)) - y);
        while (c) {
            y = ((y * 2) + x);
        }
    }
    else {
        x = 0;
    }
    if ((1 >= 3)) {
        result = 23;
    }
    if ((a >= 3)) {
        if ((b == 1)) {
            result = 1;
        }
        else {
            if ((b > 2)) {
                if ((x < 3)) {
                    while (true) {
                        a = (b + c);
                        a--;
                    }
                    return 1;
                }
                else {
                    repeat (((x < y) || ((b > c) && (d < x)))) {
                        int b;
                        x = (b * y);
                        x++;
                    }
                    return 2;
                }
            }
            if (((b < 2) && (b != 1))) {
                result = 3;
            }
        }
    }
    foo1(b, c, d);
    return a;
    return true;
    return false;
    return (1 + (2 / 4));
    return foo(a, b, c);
    return a.b.c.d;
    return foo(foo1(x, y), foo2(), foo3(foo4(), foo(5)));
}
void func(int a, int b) {
    a = c = (((((a > b) && (a < b)) || ((a <= b) && ((!a) >= b))) || (!(a != b))) || ((a + (b * c)) - (((d / e) * k) / (!b))));
    a++;
    b--;
    c++;
    c--;
    result = "zzy";
    result = a.b.c.d.e.f.g;
    result = 1;
    result = true;
    result = false;
    result = (c > 1);
    result = (c < 1);
    result = (c >= 1);
    result = (c <= 1);
    result = (c == c);
    result = (c != c);
    result = (c + 2);
    result = (c / 2);
    result = (c * 2);
    result = (c - 2);
    result = (c && c);
    result = ((c || c) || c);
    result = (!c);
    result = (-c);
    cin >> i;
    cout << b;
    return;
    return a;
    return sort(a, sort(a, (b + (c * d))));
    return sort();
    repeat (true) {
        int a;
        bool b;
        result = (b + c);
        x = ((4 + (3 * 5)) - y);
    }
    while (true) {
        y = ((y * 2) + x);
    }
    if ((b == (-1))) {
        x = ((4 + (3 * 5)) - y);
        while (c) {
            y = ((y * 2) + x);
        }
    }
    if ((b == (-1))) {
        x = ((4 + (3 * 5)) - y);
        while (c) {
            y = ((y * 2) + x);
        }
    }
    else {
        x = 0;
    }
}
int main() {
    int la;
    int nw;
    cin >> n;
    while (false) {
        cin >> num;
        p.first = num;
        p.second = i;
    }
    res = min(res, dp);
    cout << res;
    return res;
}
int main() {
    if ((b == (-1))) {
        x = ((4 + (3 * 5)) - y);
        while (c) {
            y = ((y * 2) + x);
        }
    }
    else {
        x = 0;
    }
    return 0;
}
