// TEST: varDecl
int a;
bool a;
void b;
struct node x;

// TEST: varDeclList
int x; bool y; void z; 

// TEST: struct
struct node_t {
    int a;
    int bb;
    bool ccc;
    struct node_x node;
};
struct node_t {int a;int bb;bool ccc;struct node_x node;};


// TEST: func with no param, empty body
// TEST: formals, formalsList
int foo(){

}

// TEST: func with 3 params, non-empty body
// TEST: assignExp
// TEST: exp
// TEST: term
// TEST: fncall
// TEST: loc
// TEST: precedence and associativity
// TEST: formals formalsList
bool foo(int x, int y, bool z){
    int a;
    int b;
    bool aa;
    bool bb;

    a = "hello";
    aa = true;
    bb = false;
    aa = !bb; 
    c = a + b;
    a = b - c;
    d = a * c;
    b = a / d;
    c = a + b + c - d/b + b*d/c - x;

    a = !true;
    a = !b;
    a = b && c;
    c = c || d;
    d = a && b || c && d;
    a = b && d && c && d;
    a = b || c || d || e;
    
    d = a == c;
    a = b = c;
    c = a != c;
    d = a < b;
    x = a <= b;
    d = a > b;
    d = a >= b;
    d = a < c || b > d;
    d = a <= x && b >= y;

    d = -x;
    d = -3;
    d = - "hello";
    d = true;
    x = false;
    d = -( a <= c);
    d = - foo(x, y, z);

    d = foo1(foo2(foo3(), foo4(x, y)), foo5());
    d = foo1.list.getElement.setNull;

    a = c = z >=y || a != b && !aa && !(a == b) && a + b -c*d + a/d <= a;


    return 0;
}

// TEST: stmt
// note that, they can only be tested in a function
int func(int a){
    a++;
    b--;
    c++; c--;
    // test for read and write
    cin >> a;
    cin >> a.b.c.d;
    cout << b;
    cout << b.d.c.a;
    cout << "hello again";
    cout << a + b;
    cout << b * c / d - 2 + (3 - x);

    // TEST: given on the website
    if (b == -1) { x = 4+3*5-y; while (c) { y = y*2+x; } } else { x = 0; }

    // TEST: if stmt
    if(1 >= 3){
        result = 23;
    }

    // TEST: nested if stmt and if-else stmt
    if (a >= 3){
        if (b ==1){
            result = 1;
        }
        else {
            if (b > 2){
                if (x < 3){
                    // TEST: while stmt
                    while (true) {
                        a = b + c;
                        a--; // test for comment and postDecStmt
                    }
                    return 1;
                }
                else {
                    // TEST: repeat stmt
                    repeat (x < y || b > c && d < x){
                        int b;
                        x = b * y;
                        x++; // test for comment and postIncStmt
                    }
                    return 2;
                }
            }

            if (b < 2 && b != 1){
                return 3;
            }
        }
    }

    // TEST: massive indentations
    repeat (true) {int a;     int b; 
    res = b + a;  
                            x = 1 + 3 * 2 - y;    }
    if( a !=          b){
    c = a == true;
    }                   else{
          c    =  a   != b;
    }

    // TEST: fncall
    foo(b,c,d);

    // TEST: return
    return a;
    return true;
    return false;
    return 1+2/4;
    return foo(a, b, c);
    return a.b.c.d;
    return foo(foo1(x, y), foo2(), foo3(foo4(), foo(5)));
}


// TEST: massive indentations and fnDecl
int main() {int abc;int def; while (true) {cin >> abc;foo.ac = abc;foo.de = def;}res = min(res, abc);cout << res; return res;}

// TEST: fnDecl
// TEST: indent 
int main() {
if (b == -1) { x = 4+3*5-y; while (c) { y = y*2+x; } } else { x = 0; } return 0;}

// comment
## comment