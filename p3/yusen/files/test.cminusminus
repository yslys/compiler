int a;
bool a;
void b;
struct node x;

// TEST: struct
struct node_t {
    int a;
    int bb;
    bool ccc;
    struct node_x node;
};

// TEST: func with no param, empty body
int foo(){

}

// TEST: func with 3 params, non-empty body
// TEST: assignExp
// TEST: exp
// TEST: term
// TEST: fncall
// TEST: loc
bool foo(int x, int y, bool z){
    int a;
    int b;

    a = "hello";

    c = a + b;
    a = b - c;
    d = a * c;
    b = a / d;
    c = a + b + c - d/b + b*d/c - x;

    a = !true;
    a = !b;
    a = b && c;
    c = c || d;
    d = a && b || c && d;
    a = b && d && c && d;
    a = b || c || d || e;
    
    d = a == c;
    a = b = c;
    c = a != c;
    d = a < b;
    x = a <= b;
    d = a > b;
    d = a >= b;
    d = a < c || b > d;
    d = a <= x && b >= y;

    d = -x;
    d = -3;
    d = - "hello";
    d = true;
    x = false;
    d = -( a <= c);
    d = - foo(x, y, z);

    d = foo1(foo2(foo3(), foo4(x, y)), foo5());
    d = foo1.list.getElement.setNull;

    return 0;
}

// TEST: stmt
// note that, they can only be tested in a function
int func(int a){

    // test for read and write
    cin >> a;
    cin >> a.b.c.d;
    cout << b;
    cout << b.d.c.a;
    cout << "hello again";
    cout << a + b;
    cout << b * c / d - 2 + (3 - x);

    // TEST: on the website
    if (b == -1) { x = 4+3*5-y; while (c) { y = y*2+x; } } else { x = 0; }

    // TEST: if stmt
    if(1 >= 3){
        result = 23;
    }

    // TEST: nested if stmt and if-else stmt
    if (a >= 3){
        if (b ==1){
            result = 1;
        }
        else {
            if (b > 2){
                if (x < 3){
                    // TEST: while stmt
                    while (true) {
                        a = b + c;
                        a--; // test for comment and postDecStmt
                    }
                    return false;
                }
                else {
                    // TEST: repeat stmt
                    repeat (x < y || b > c && d < x){
                        int b;
                        x = b * y;
                        x++; // test for comment and postIncStmt
                    }
                    return true;
                }
            }

            if (b < 2 && b != 1){
                result = 3;
            }
        }
    }

    // TEST: fncall
    foo1(b,c,d);

    // TEST: return
    return a;
    return true;
    return false;
    return 1+2/4;
    return foo(a, b, c);
    return a.b.c.d;
    return foo(foo1(x, y), foo2(), foo3(foo4(), foo(5)));
}


















// test for

void func(int a, int b) {
    
    a = c = a > b && a < b || a <= b && !a >= b || !(a!=b) || a + b * c - d / e * k / !b;
    c++;
    c--;
    result = "zzy";
    result = a.b.c.d.e.f.g;
    result = 1;
    result = true;
    result = false;
    result = c > 1;
    result = c < 1;
    result = c >= 1;
    result = c <= 1;
    result = c == c;
    result = c != c;
    result = c + 2;
    result = c / 2;
    result = c * 2;
    result = c - 2;
    result = c && c;
    result = c || c || c;
    result = !c;
    result = -c;
    cin >> i;
    cout << b;
    return;
    return a;
    return sort(a, sort(a, b + c * d));
    return sort();
    repeat (true) {
        int a;
        bool b;
        result = b + c;
        x = 4 + 3 * 5 - y;
    }
    while (true) {
        y = y * 2 + x;
    }
    if (b == -1) {
        x = 4 + 3 * 5 - y;
        while (c) {
            y = y * 2 + x;
        }
    }
    if (b == -1) {
        x = 4 + 3 * 5 - y;
        while (c) {
            y = y * 2 + x;
        }
    }
    else {
        x = 0;
    }
}
int N;
int INF;
int n;
int main() {
    int la;
    int nw;
    cin >> n;
    while (false) {
        cin >> num;
        p.first = num;
        p.second = i;
    }
    sort(p + 1, p + n + 1);
    if (true) {
        swap(la, nw);
        fill(dp + 1, dp + n + 1, INF);
        while (false) {
            pmin = min(pmin, dp);
            dp = pmin + abs(cur_num - p.first);
        }
    }
    res = min(res, dp);
    cout << res;
}

int main() {
if (b == -1) { x = 4+3*5-y; while (c) { y = y*2+x; } } else { x = 0; }}

// comment
## comment