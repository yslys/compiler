
//----------------------------------------------------
// The following code was generated by CUP v0.11b ${cupversion} (SVN rev )
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b ${cupversion} (SVN rev ) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\006\005\000\002\006\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\005\004\000\002\005\002\000\002\011" +
    "\006\000\002\012\010\000\002\013\004\000\002\013\003" +
    "\000\002\014\004\000\002\014\005\000\002\015\003\000" +
    "\002\015\005\000\002\016\004\000\002\017\006\000\002" +
    "\020\004\000\002\020\002\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\006\000\002\021\006" +
    "\000\002\021\012\000\002\021\017\000\002\021\012\000" +
    "\002\021\012\000\002\021\005\000\002\021\004\000\002" +
    "\021\004\000\002\022\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\006\000\002\026\003\000\002\026\005\000\002\027" +
    "\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\011" +
    "\ufffe\001\002\000\014\002\001\004\010\005\011\006\013" +
    "\011\012\001\002\000\004\002\006\001\002\000\004\002" +
    "\000\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\011\ufffd\001\002\000\004\021\ufff8\001\002\000\004\021" +
    "\ufff7\001\002\000\004\021\020\001\002\000\004\021\ufff6" +
    "\001\002\000\004\021\020\001\002\000\014\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\011\uffff\001\002\000\014\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\011\ufffc\001\002\000\014\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\001\002\000\056" +
    "\021\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\001\002\000\006\026\024\030\022" +
    "\001\002\000\034\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\025\ufffa\001\002\000\004\024\035\001\002\000" +
    "\012\004\010\005\011\006\013\027\025\001\002\000\004" +
    "\024\uffee\001\002\000\004\021\020\001\002\000\004\027" +
    "\033\001\002\000\006\027\uffec\031\031\001\002\000\010" +
    "\004\010\005\011\006\013\001\002\000\004\027\uffeb\001" +
    "\002\000\004\024\uffed\001\002\000\006\027\uffea\031\uffea" +
    "\001\002\000\032\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\025\ufff3\001\002\000\014\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\011\ufff2\001\002\000\032\004\010\005\011\006\013" +
    "\011\041\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\025\uffe7\001\002\000\004\021\020\001\002" +
    "\000\004\021\020\001\002\000\032\004\ufff4\005\ufff4\006" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\025\ufff4\001\002\000\022\012\056\013" +
    "\050\014\052\016\044\017\045\020\057\021\020\025\054" +
    "\001\002\000\004\026\206\001\002\000\004\026\177\001" +
    "\002\000\052\026\170\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\001\002\000\022\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\025\uffe8\001\002" +
    "\000\004\033\165\001\002\000\012\032\131\035\162\036" +
    "\161\054\130\001\002\000\004\026\145\001\002\000\004" +
    "\030\144\001\002\000\014\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\011\uffe9\001\002\000\004\030\143\001\002\000\004" +
    "\034\137\001\002\000\024\007\062\010\066\021\020\022" +
    "\074\023\070\026\073\030\067\040\060\043\072\001\002" +
    "\000\016\007\062\010\066\021\020\022\074\023\070\026" +
    "\073\001\002\000\040\027\uffca\030\uffca\031\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\040" +
    "\027\uffc6\030\uffc6\031\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\034\030\134\037\105\040" +
    "\077\041\110\042\100\044\076\045\112\046\111\047\101" +
    "\050\106\051\103\052\102\053\104\001\002\000\044\027" +
    "\uffc9\030\uffc9\031\uffc9\032\131\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\130\001\002\000\040\027\uffd9" +
    "\030\uffd9\031\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\001\002\000\040\027\uffc5\030\uffc5\031\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000" +
    "\022\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\025\uffdc\001\002\000\040\027\uffc7\030\uffc7\031" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\040\027\uffc3\030\uffc3\031\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\022\007\062" +
    "\010\066\021\020\022\074\023\070\026\073\040\060\043" +
    "\072\001\002\000\022\007\062\010\066\021\020\022\074" +
    "\023\070\026\073\040\060\043\072\001\002\000\040\027" +
    "\uffc8\030\uffc8\031\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\034\027\107\037\105\040\077" +
    "\041\110\042\100\044\076\045\112\046\111\047\101\050" +
    "\106\051\103\052\102\053\104\001\002\000\022\007\062" +
    "\010\066\021\020\022\074\023\070\026\073\040\060\043" +
    "\072\001\002\000\022\007\062\010\066\021\020\022\074" +
    "\023\070\026\073\040\060\043\072\001\002\000\022\007" +
    "\062\010\066\021\020\022\074\023\070\026\073\040\060" +
    "\043\072\001\002\000\022\007\062\010\066\021\020\022" +
    "\074\023\070\026\073\040\060\043\072\001\002\000\022" +
    "\007\062\010\066\021\020\022\074\023\070\026\073\040" +
    "\060\043\072\001\002\000\022\007\062\010\066\021\020" +
    "\022\074\023\070\026\073\040\060\043\072\001\002\000" +
    "\022\007\062\010\066\021\020\022\074\023\070\026\073" +
    "\040\060\043\072\001\002\000\022\007\062\010\066\021" +
    "\020\022\074\023\070\026\073\040\060\043\072\001\002" +
    "\000\022\007\062\010\066\021\020\022\074\023\070\026" +
    "\073\040\060\043\072\001\002\000\040\027\uffc4\030\uffc4" +
    "\031\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\001\002\000\022\007\062\010\066\021\020\022\074\023" +
    "\070\026\073\040\060\043\072\001\002\000\022\007\062" +
    "\010\066\021\020\022\074\023\070\026\073\040\060\043" +
    "\072\001\002\000\022\007\062\010\066\021\020\022\074" +
    "\023\070\026\073\040\060\043\072\001\002\000\040\027" +
    "\uffd2\030\uffd2\031\uffd2\037\105\040\077\041\110\042\100" +
    "\044\uffd2\045\uffd2\046\111\047\101\050\106\051\103\052" +
    "\102\053\104\001\002\000\034\027\uffd1\030\uffd1\031\uffd1" +
    "\037\105\040\077\041\110\042\100\044\uffd1\045\uffd1\050" +
    "\106\051\103\052\102\053\104\001\002\000\040\027\uffd6" +
    "\030\uffd6\031\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\001\002\000\030\027\uffcf\030\uffcf\031\uffcf\037" +
    "\105\040\077\041\110\042\100\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\001\002\000\040\027\uffd8\030\uffd8\031\uffd8\037" +
    "\uffd8\040\uffd8\041\110\042\100\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002\000" +
    "\030\027\uffcc\030\uffcc\031\uffcc\037\105\040\077\041\110" +
    "\042\100\044\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000" +
    "\030\027\uffce\030\uffce\031\uffce\037\105\040\077\041\110" +
    "\042\100\044\uffce\045\uffce\046\uffce\047\uffce\001\002\000" +
    "\030\027\uffcd\030\uffcd\031\uffcd\037\105\040\077\041\110" +
    "\042\100\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000" +
    "\034\027\uffd0\030\uffd0\031\uffd0\037\105\040\077\041\110" +
    "\042\100\044\uffd0\045\uffd0\050\106\051\103\052\102\053" +
    "\104\001\002\000\040\027\uffd5\030\uffd5\031\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\040" +
    "\027\uffd7\030\uffd7\031\uffd7\037\uffd7\040\uffd7\041\110\042" +
    "\100\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\001\002\000\040\027\uffd3\030\uffd3\031" +
    "\uffd3\037\105\040\077\041\110\042\100\044\uffd3\045\uffd3" +
    "\046\111\047\101\050\106\051\103\052\102\053\104\001" +
    "\002\000\040\027\uffd4\030\uffd4\031\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000\022\007\062" +
    "\010\066\021\020\022\074\023\070\026\073\040\060\043" +
    "\072\001\002\000\004\021\020\001\002\000\050\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\001\002\000" +
    "\040\027\uffda\030\uffda\031\uffda\037\105\040\077\041\110" +
    "\042\100\044\076\045\112\046\111\047\101\050\106\051" +
    "\103\052\102\053\104\001\002\000\022\012\uffdd\013\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\025\uffdd\001" +
    "\002\000\040\027\uffcb\030\uffcb\031\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\042\027\uffc9" +
    "\030\uffc9\031\uffc9\032\131\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\001\002\000\004\021\020\001\002\000" +
    "\006\030\142\032\131\001\002\000\006\030\uffbe\032\uffbe" +
    "\001\002\000\022\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\025\uffe3\001\002\000\022\012\uffdb" +
    "\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\025" +
    "\uffdb\001\002\000\022\012\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\025\uffe6\001\002\000\022\007" +
    "\062\010\066\021\020\022\074\023\070\026\073\040\060" +
    "\043\072\001\002\000\034\027\147\037\105\040\077\041" +
    "\110\042\100\044\076\045\112\046\111\047\101\050\106" +
    "\051\103\052\102\053\104\001\002\000\004\024\150\001" +
    "\002\000\032\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\025" +
    "\ufff3\001\002\000\032\004\010\005\011\006\013\011\041" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\025\uffe7\001\002\000\022\012\056\013\050\014\052" +
    "\016\044\017\045\020\057\021\020\025\153\001\002\000" +
    "\024\012\uffe1\013\uffe1\014\uffe1\015\154\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\025\uffe1\001\002\000\004\024\155\001" +
    "\002\000\032\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\025" +
    "\ufff3\001\002\000\032\004\010\005\011\006\013\011\041" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\025\uffe7\001\002\000\022\012\056\013\050\014\052" +
    "\016\044\017\045\020\057\021\020\025\160\001\002\000" +
    "\022\012\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\025\uffe0\001\002\000\004\030\164\001\002\000" +
    "\004\030\163\001\002\000\022\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\025\uffe5\001\002\000" +
    "\022\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\025\uffe4\001\002\000\022\007\062\010\066\021" +
    "\020\022\074\023\070\026\073\040\060\043\072\001\002" +
    "\000\034\030\167\037\105\040\077\041\110\042\100\044" +
    "\076\045\112\046\111\047\101\050\106\051\103\052\102" +
    "\053\104\001\002\000\022\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\025\uffe2\001\002\000\024" +
    "\007\062\010\066\021\020\022\074\023\070\026\073\027" +
    "\173\040\060\043\072\001\002\000\036\027\uffc0\031\uffc0" +
    "\037\105\040\077\041\110\042\100\044\076\045\112\046" +
    "\111\047\101\050\106\051\103\052\102\053\104\001\002" +
    "\000\006\027\175\031\174\001\002\000\040\027\uffc2\030" +
    "\uffc2\031\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\001\002\000\022\007\062\010\066\021\020\022\074" +
    "\023\070\026\073\040\060\043\072\001\002\000\040\027" +
    "\uffc1\030\uffc1\031\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\036\027\uffbf\031\uffbf\037\105" +
    "\040\077\041\110\042\100\044\076\045\112\046\111\047" +
    "\101\050\106\051\103\052\102\053\104\001\002\000\022" +
    "\007\062\010\066\021\020\022\074\023\070\026\073\040" +
    "\060\043\072\001\002\000\034\027\201\037\105\040\077" +
    "\041\110\042\100\044\076\045\112\046\111\047\101\050" +
    "\106\051\103\052\102\053\104\001\002\000\004\024\202" +
    "\001\002\000\032\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\025\ufff3\001\002\000\032\004\010\005\011\006\013\011" +
    "\041\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\025\uffe7\001\002\000\022\012\056\013\050\014" +
    "\052\016\044\017\045\020\057\021\020\025\205\001\002" +
    "\000\022\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\025\uffde\001\002\000\022\007\062\010\066" +
    "\021\020\022\074\023\070\026\073\040\060\043\072\001" +
    "\002\000\034\027\210\037\105\040\077\041\110\042\100" +
    "\044\076\045\112\046\111\047\101\050\106\051\103\052" +
    "\102\053\104\001\002\000\004\024\211\001\002\000\032" +
    "\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\025\ufff3\001\002" +
    "\000\032\004\010\005\011\006\013\011\041\012\uffe7\013" +
    "\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\025\uffe7" +
    "\001\002\000\022\012\056\013\050\014\052\016\044\017" +
    "\045\020\057\021\020\025\214\001\002\000\022\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\025" +
    "\uffdf\001\002\000\004\021\020\001\002\000\004\030\217" +
    "\001\002\000\034\002\ufff9\004\ufff9\005\ufff9\006\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\025\ufff9\001\002\000\004\030\022\001\002\000" +
    "\006\021\020\024\222\001\002\000\012\004\010\005\011" +
    "\006\013\011\041\001\002\000\014\004\010\005\011\006" +
    "\013\011\041\025\226\001\002\000\014\004\uffef\005\uffef" +
    "\006\uffef\011\uffef\025\uffef\001\002\000\014\004\ufff0\005" +
    "\ufff0\006\ufff0\011\ufff0\025\ufff0\001\002\000\004\030\227" +
    "\001\002\000\014\002\ufff1\004\ufff1\005\ufff1\006\ufff1\011" +
    "\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\006\002\004\003\003\001\001\000\014\004" +
    "\014\006\006\007\013\011\015\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\220\001\001\000\002" +
    "\001\001\000\004\010\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\022\001\001\000\002\001\001\000\004\017\035\001" +
    "\001\000\010\007\025\015\026\016\027\001\001\000\002" +
    "\001\001\000\004\010\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\025\015\031\016\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\036\001\001\000\002\001\001\000\010\006\041" +
    "\007\037\020\042\001\001\000\004\010\217\001\001\000" +
    "\004\010\214\001\001\000\002\001\001\000\014\010\045" +
    "\021\046\022\052\025\054\027\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\045\022\064\023\062\024\060\025" +
    "\070\027\063\001\001\000\012\010\045\024\134\025\070" +
    "\027\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\045\022\064\023\126\024\060\025\070" +
    "\027\063\001\001\000\016\010\045\022\064\023\074\024" +
    "\060\025\070\027\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\045\022\064\023\125\024\060\025" +
    "\070\027\063\001\001\000\016\010\045\022\064\023\124" +
    "\024\060\025\070\027\063\001\001\000\016\010\045\022" +
    "\064\023\123\024\060\025\070\027\063\001\001\000\016" +
    "\010\045\022\064\023\122\024\060\025\070\027\063\001" +
    "\001\000\016\010\045\022\064\023\121\024\060\025\070" +
    "\027\063\001\001\000\016\010\045\022\064\023\120\024" +
    "\060\025\070\027\063\001\001\000\016\010\045\022\064" +
    "\023\117\024\060\025\070\027\063\001\001\000\016\010" +
    "\045\022\064\023\116\024\060\025\070\027\063\001\001" +
    "\000\016\010\045\022\064\023\115\024\060\025\070\027" +
    "\063\001\001\000\002\001\001\000\016\010\045\022\064" +
    "\023\114\024\060\025\070\027\063\001\001\000\016\010" +
    "\045\022\064\023\113\024\060\025\070\027\063\001\001" +
    "\000\016\010\045\022\064\023\112\024\060\025\070\027" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\045\022\064\023\132\024\060" +
    "\025\070\027\063\001\001\000\004\010\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\140\027\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\045\022" +
    "\064\023\145\024\060\025\070\027\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\150\001\001\000" +
    "\010\006\041\007\037\020\151\001\001\000\014\010\045" +
    "\021\046\022\052\025\054\027\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\155\001\001\000\010" +
    "\006\041\007\037\020\156\001\001\000\014\010\045\021" +
    "\046\022\052\025\054\027\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\045\022\064\023\165\024\060" +
    "\025\070\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\045\022\064\023\170\024\060\025\070" +
    "\026\171\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\045\022\064\023\175" +
    "\024\060\025\070\027\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\045\022\064\023\177\024\060" +
    "\025\070\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\202\001\001\000\010\006\041\007\037" +
    "\020\203\001\001\000\014\010\045\021\046\022\052\025" +
    "\054\027\050\001\001\000\002\001\001\000\016\010\045" +
    "\022\064\023\206\024\060\025\070\027\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\211\001\001" +
    "\000\010\006\041\007\037\020\212\001\001\000\014\010" +
    "\045\021\046\022\052\025\054\027\050\001\001\000\002" +
    "\001\001\000\004\010\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\215\001\001" +
    "\000\010\006\223\007\037\013\222\001\001\000\006\006" +
    "\224\007\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declList 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(new DeclListNode(d));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d);
                   RESULT = dl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              DeclNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= fnDecl 
            {
              DeclNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnDeclNode f = (FnDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= structDecl 
            {
              DeclNode RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDeclNode sd = (StructDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= type id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= STRUCT id id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i1 = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i2 = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(new StructNode(i1), i2, 1);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new IntNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new BoolNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= VOID 
            {
              TypeNode RESULT =null;
		 RESULT = new VoidNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id ::= ID 
            {
              IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vl.addLast(v);
                   RESULT = vl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDeclList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fnDecl ::= type id formals fnBody 
            {
              FnDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsListNode fm = (FormalsListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnBodyNode fb = (FnBodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FnDeclNode(t, i, fm, fb);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              StructDeclNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StructDeclNode(i, new DeclListNode(sb));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // structBody ::= structBody varDecl 
            {
              LinkedList RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sb.addLast(v);
                   RESULT = sb;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // structBody ::= varDecl 
            {
              LinkedList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList ll = new LinkedList<VarDeclNode>();
                   ll.addLast(v);
                   RESULT = ll;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= LPAREN RPAREN 
            {
              FormalsListNode RESULT =null;
		 RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= LPAREN formalsList RPAREN 
            {
              FormalsListNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalsListNode(fl);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalDeclNode f = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList ll = new LinkedList<FormalDeclNode>();
                   ll.addLast(f);
                   RESULT = ll;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDeclNode f = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fl.addFirst(f); 
                   RESULT = fl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalDecl ::= type id 
            {
              FormalDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalDeclNode(t, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FnBodyNode RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnBodyNode(new DeclListNode(vl), new StmtListNode(sl)); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtNode s = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.addLast(s);
                   RESULT = sl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<StmtNode>();  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= assignExp SEMICOLON 
            {
              StmtNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignNode ae = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtNode(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostIncStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostDecStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= CIN READ loc SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStmtNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl)); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList vl1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList sl1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vl2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmtNode(e, new DeclListNode(vl1), new StmtListNode(sl1),
                                               new DeclListNode(vl2), new StmtListNode(sl2) );  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= REPEAT LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RepeatStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= RETURN exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN SEMICOLON 
            {
              StmtNode RESULT =null;
		 RESULT = new ReturnStmtNode(null); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= fncall SEMICOLON 
            {
              StmtNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpNode fc = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmtNode(fc); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignExp ::= loc ASSIGN exp 
            {
              AssignNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignNode(l, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= assignExp 
            {
              ExpNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignNode ae = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PLUS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MINUS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp TIMES exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp DIVIDE exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NOT exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp AND exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp OR exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp EQUALS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp NOTEQUALS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp LESS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp GREATER exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LESSEQ exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp GREATEREQ exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= MINUS term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinusNode(t);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= loc 
            {
              ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= INTLITERAL 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= STRINGLITERAL 
            {
              ExpNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= TRUE 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal t = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TrueNode(t.linenum, t.charnum); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= FALSE 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal f = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FalseNode(f.linenum, f.charnum); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= LPAREN exp RPAREN 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= fncall 
            {
              ExpNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpNode fc = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fncall ::= id LPAREN RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExpNode(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fncall ::= id LPAREN actualList RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExpNode(i, new ExpListNode(al)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actualList ::= exp 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpNode> l = new LinkedList<ExpNode>();
		           l.addLast(e);
		           RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 al.addLast(e);
		           RESULT = al;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loc ::= id 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loc ::= loc DOT id 
            {
              ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DotAccessExpNode(l, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
