import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%



DIGIT=               [0-9]
LETTER=              [a-zA-Z]
SPACE=               [\040\t]

// The use of the word "escape" really means to temporarily escape out of 
// parsing the text and into a another mode where the subsequent character is 
// treated differently.
// Note that:
//      \' - matches the empty string, but only at the end of the string or 
//           buffer (or its accessible portion) being matched against.
//      \n can be interpreted as 2 ways:
            i) a 2-char string with 1st_char='\', 2nd_char='n' => regexp = [\\n]
           ii) a character meaning "newline"                   => regexp = [\n]
// Links: https://stackoverflow.com/questions/7392388/how-to-specify-single-\
//        quote-in-regular-expression
//        https://emacs.stackexchange.com/questions/45382/elisp-regex-newline-\
//        escape-confusion
ESCAPECHAR = [\\][nt'\"?\\]

// string character
// (either an escaped character: \n, \t, \', \", \?, \\
//  or     a single character other than new line or double quote or backslash)
STRINGCHAR = ({ESCAPECHAR}|([^\n\"\\]))+





%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

// reserved words
// bool  int   void  true  false  struct
// cin   cout  if    else  while  return  
"bool"    {
            Symbol s = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"int"     {
            symbol s = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"void"    {
            symbol s = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"true"    {
            symbol s = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"false"   {
            symbol s = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"struct"  {
            symbol s = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cin"     {
            symbol s = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cout"    {
            symbol s = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"if"      {
            symbol s = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"else"    {
            symbol s = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"while"   {
            symbol s = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"return"  {
            symbol s = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

// identifier 
// (a seq of >=1 letters and/or digits, and/or underscores, starting with a 
//  letter or underscore, excluding reserved words)
// Note that: we have defined the reserved words already, so no need to exclude 
//            here.
({LETTER}|_)+({LETTER}|{DIGIT}|_)*  {
            Symbol s = new Symbol(sym.ID, 
                               new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return s;
}

// integer literal
// (a seq of >=1 digits)
{DIGIT}+  {
            double d = Double.parseDouble(yytext());
            int val = 0;
            
            // check for overflow
            if(d < Integer.MIN_VALUE || d > Integer.MAX_VALUE){
                ErrMsg.warn(yyline+1, CharNum.num, 
                        "integer literal too large; using max value");
                val = Integer.MAX_VALUE;
            }
            else{
                val = Integer.parseInt(yytext());
            }
            
            Symbol s = new Symbol(sym.INTLITERAL,
                            new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return s;
          }

// string literal 
// (a seq of >=0 string characters surrounded by double quotes)
[\"]{STRINGCHAR}*[\"] {
            Symbol s = new Symbol(sym.STRINGLITERAL, 
                            new StrLitTokenVal(yyline+1, CharNum.num, yytext());
            CharNum.num += yytext().length();
            return s;
}

// unterminated string literal
// (there is a newline or end-of-file before the closing quote)












\n        { CharNum.num = 1; }

{SPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol s = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return s;
          }






\"(  (\\[n|t|'|(\")|(\\)|?])  |  [^\n\"\\]  )*  (\n)?















.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
