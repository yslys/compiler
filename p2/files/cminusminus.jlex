import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%



DIGIT=               [0-9]
LETTER=              [a-zA-Z]
SPACE=               [\040\t]

ESCAPE_CHAR = [\\][nt'\"?\\]
BAD_ESCAPE_CHAR = [\\][^nt'\"?\\]
SINGLE_CHAR = [^\n\"\\]
STRING_CHAR = {ESCAPE_CHAR}|{SINGLE_CHAR}


%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%


"bool"    {
            Symbol s = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"int"     {
            Symbol s = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"void"    {
            Symbol s = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"true"    {
            Symbol s = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"false"   {
            Symbol s = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"struct"  {
            Symbol s = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cin"     {
            Symbol s = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"cout"    {
            Symbol s = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"if"      {
            Symbol s = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"else"    {
            Symbol s = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"while"   {
            Symbol s = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

"return"  {
            Symbol s = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return s;
          }

({LETTER}|_)+({LETTER}|{DIGIT}|_)* {
            // identifier 
            // (a seq of >=1 letters and/or digits, and/or underscores, starting 
            // with a letter or underscore, excluding reserved words)
            // Note that: we have defined the reserved words already, so no need 
            //            to exclude here.
            Symbol s = new Symbol(sym.ID, 
                               new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return s;
}

{DIGIT}+  {
            // integer literal
            // (a seq of >=1 digits)
            double d = Double.parseDouble(yytext());
            int val = 0;
            
            // check for overflow
            if(d < Integer.MIN_VALUE || d > Integer.MAX_VALUE){
                ErrMsg.warn(yyline+1, CharNum.num, 
                        "integer literal too large; using max value");
                val = Integer.MAX_VALUE;
            }
            else{
                val = Integer.parseInt(yytext());
            }
            
            Symbol s = new Symbol(sym.INTLITERAL,
                            new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return s;
          }   

[\"]{STRING_CHAR}*[\"] {
            // string literal 
            // (a seq of >=0 string characters surrounded by double quotes)
            Symbol s = new Symbol(sym.STRINGLITERAL, 
                            new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return s;
}

[\"]({STRING_CHAR})* {
            // unterminated string literal
            // (there is a newline or end-of-file before the closing quote)
            // ignore the unterminated Str Lit (start looking for the next token 
            // after the newline)
            // ***so this regexp must keep reading all SINGLE_CHARs***
            ErrMsg.fatal(yyline+1, CharNum.num, 
                    "unterminated string literal ignored");
            CharNum.num = 1;
}

[\"](({STRING_CHAR})*{BAD_ESCAPE_CHAR}({STRING_CHAR})*)+ {
            // bad string literal
            // (includes a bad escaped char AND not terminated)
            // ignore the Bad Str Lit (start looking for the next token after 
            // the closing quote)
            // ***so this regexp must keep reading all SINGLE_CHARs*** 
            ErrMsg.fatal(yyline+1, CharNum.num,
                    "unterminated string literal with bad escaped character ignored");
            CharNum.num = 1;
}

[\"]({STRING_CHAR}*{BAD_ESCAPE_CHAR}{STRING_CHAR}*)+[\"] {
            // bad string literal
            // terminated, but includes a bad escaped char
            // after reading the single escaped char, keep reading until a double 
            // quote
            ErrMsg.fatal(yyline + 1, CharNum.num, 
                    "string literal with bad escaped character ignored");
            CharNum.num = 1;
}


"{"       {   
            Symbol s = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
          } 
          
"}"       { 
            Symbol s = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
          } 
 
"("       { 
            Symbol s = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
          }        
         
")"       { 
            Symbol s = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
          }
         
";"       { 
            Symbol s = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
          }
         
","     { 
            Symbol s = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        } 
         
"."     { 
            Symbol s = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        }
         
"<<"    { 
            Symbol s = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }
         
">>"    { 
            Symbol s = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }  
         
"++"    { 
            Symbol s = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }  
         
"--"    { 
            Symbol s = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }

"+"     { 
            Symbol s = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return s;
        }
         
"-"     { 
            Symbol s = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        }
         
"*"     { 
            Symbol s = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        }   
         
"/"     { 
            Symbol s = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        } 
         
"!"     { 
            Symbol s = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        } 
         
"&&"    { 
            Symbol s = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        } 
         
"||"    { 
            Symbol s = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }
         
"=="    { 
            Symbol s = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        }   
         
"!="    { 
            Symbol s = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        } 
         
"<"     { 
            Symbol s = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        } 
         
">"     { 
            Symbol s = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        } 
       
"<="    { 
            Symbol s = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        } 
         
">="    { 
            Symbol s = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return s;
        } 
         
"="     { 
            Symbol s = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 1;
            return s;
        }   


((//)|(##))[^\n]*  { CharNum.num = 1; }

\n        { CharNum.num = 1; }

{SPACE}+  { CharNum.num += yytext().length(); }



.         { 
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
